basePath: /api/v1
definitions:
  dto.AuthRegisterRes:
    properties:
      password:
        example: Hashed Password
        type: string
    type: object
  dto.AuthRequest:
    properties:
      password:
        example: secret123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  dto.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        example: Invalid credentials
        type: string
    type: object
  entity.MerchantErrorResponse:
    properties:
      error:
        example: Invalid merchant
        type: string
    type: object
  entity.MerchantRequest:
    properties:
      address:
        example: Jombang
        type: string
      balance:
        example: 500000
        type: number
      idProduct:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      idUser:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      nameMerchant:
        example: Konter Pak Eko
        type: string
    required:
    - address
    - balance
    - idProduct
    - idUser
    - nameMerchant
    type: object
  entity.MerchantResponse:
    properties:
      address:
        example: Jombang
        type: string
      balance:
        example: 500000
        type: number
      idMerchant:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      idProduct:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      idUser:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      nameMerchant:
        example: Toko Pak Eko
        type: string
    type: object
  entity.ProductErrorResponse:
    properties:
      error:
        example: Invalid product
        type: string
    type: object
  entity.ProductRequest:
    properties:
      idSupliyer:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      nameProvider:
        example: Indosat
        type: string
      nominal:
        example: 5000
        type: number
      price:
        example: 6000
        type: number
    required:
    - idSupliyer
    - nameProvider
    - nominal
    - price
    type: object
  entity.ProductResponse:
    properties:
      idProduct:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      idSupliyer:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      nameProvider:
        example: Indosat
        type: string
      nominal:
        example: 5000
        type: number
      price:
        example: 6000
        type: number
    type: object
  entity.TransactionDetail:
    properties:
      Price:
        type: number
      productId:
        type: string
      transactionDetailId:
        type: string
      transactionId:
        type: string
    type: object
  entity.TransactionDetailReq:
    properties:
      productId:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
    required:
    - productId
    type: object
  entity.TransactionErrorResponse:
    properties:
      error:
        example: Invalid transaction
        type: string
    type: object
  entity.TransactionReq:
    properties:
      customerName:
        example: customer a
        type: string
      destinationNumber:
        example: 08....
        type: string
      merchantId:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      transactionDate:
        example: 27-10-2024
        type: string
      transactionDetail:
        items:
          $ref: '#/definitions/entity.TransactionDetailReq'
        type: array
      userId:
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
    required:
    - customerName
    - destinationNumber
    - merchantId
    - transactionDate
    - transactionDetail
    - userId
    type: object
  entity.Transactions:
    properties:
      customerName:
        type: string
      destinationNumber:
        type: string
      merchantId:
        type: string
      transactionDate:
        type: string
      transactionDetail:
        items:
          $ref: '#/definitions/entity.TransactionDetail'
        type: array
      transactionId:
        type: string
      userId:
        type: string
    type: object
  entity.User:
    properties:
      id_user:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  entity.UserErrorResponse:
    properties:
      error:
        example: Invalid product
        type: string
    type: object
  entity.UserReqUpdate:
    properties:
      name:
        type: string
    type: object
  entity.UserResponse:
    properties:
      id_user:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Server for Pulsa Application
  title: Server Pulsa API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and get JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login user
      tags:
      - authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered
          schema:
            $ref: '#/definitions/dto.AuthRegisterRes'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register user
      tags:
      - authentication
  /merchant:
    post:
      consumes:
      - application/json
      description: Create a new merchant in the system
      parameters:
      - description: Merchant details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.MerchantRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created
          schema:
            $ref: '#/definitions/entity.MerchantResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/entity.MerchantErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.MerchantErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new merchant
      tags:
      - merchants
  /merchant/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a merchant by its ID
      parameters:
      - description: Merchant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.MerchantErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/entity.MerchantErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete merchant
      tags:
      - merchants
    get:
      consumes:
      - application/json
      description: Retrieve a merchant by its ID
      parameters:
      - description: Merchant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Merchant found
          schema:
            $ref: '#/definitions/entity.MerchantResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.MerchantErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/entity.MerchantErrorResponse'
      security:
      - BearerAuth: []
      summary: Get merchant by ID
      tags:
      - merchants
    put:
      consumes:
      - application/json
      description: Update an existing merchant
      parameters:
      - description: Merchant ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated merchant details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.MerchantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated merchant
          schema:
            $ref: '#/definitions/entity.MerchantResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/entity.MerchantErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.MerchantErrorResponse'
        "404":
          description: Merchant not found
          schema:
            $ref: '#/definitions/entity.MerchantErrorResponse'
      security:
      - BearerAuth: []
      summary: Update merchant
      tags:
      - merchants
  /merchants:
    get:
      consumes:
      - application/json
      description: Get a list of all merchants
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of merchants
          schema:
            items:
              items:
                $ref: '#/definitions/entity.MerchantResponse'
              type: array
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.MerchantErrorResponse'
      security:
      - BearerAuth: []
      summary: List all merchants
      tags:
      - merchants
  /product:
    post:
      consumes:
      - application/json
      description: Create a new product in the system
      parameters:
      - description: Product details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.ProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created product
          schema:
            $ref: '#/definitions/entity.ProductResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/entity.ProductErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.ProductErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new product
      tags:
      - products
  /product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.ProductErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/entity.ProductErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Retrieve a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product found
          schema:
            $ref: '#/definitions/entity.ProductResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.ProductErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/entity.ProductErrorResponse'
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.ProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated product
          schema:
            $ref: '#/definitions/entity.ProductResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/entity.ProductErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.ProductErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/entity.ProductErrorResponse'
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - products
  /products:
    get:
      consumes:
      - application/json
      description: Get a list of all products
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            items:
              items:
                $ref: '#/definitions/entity.ProductResponse'
              type: array
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.ProductErrorResponse'
      security:
      - BearerAuth: []
      summary: List all products
      tags:
      - products
  /transaction:
    post:
      consumes:
      - application/json
      description: Create a new transaction in the system
      parameters:
      - description: Transaction details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.TransactionReq'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created transaction
          schema:
            $ref: '#/definitions/entity.Transactions'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/entity.TransactionErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.TransactionErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new transaction
      tags:
      - transactions
  /transaction/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a transaction by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction found
          schema:
            $ref: '#/definitions/entity.Transactions'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.TransactionErrorResponse'
        "404":
          description: Transaction not found
          schema:
            $ref: '#/definitions/entity.TransactionErrorResponse'
      security:
      - BearerAuth: []
      summary: Get transaction by ID
      tags:
      - transactions
  /transactions:
    get:
      consumes:
      - application/json
      description: Get a list of all transactions
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of transactions
          schema:
            items:
              items:
                $ref: '#/definitions/entity.Transactions'
              type: array
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.TransactionErrorResponse'
      security:
      - BearerAuth: []
      summary: List all transactions
      tags:
      - transactions
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.UserErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/entity.UserErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/entity.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.UserErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/entity.UserErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.UserReqUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/entity.UserResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/entity.UserErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.UserErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/entity.UserErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              items:
                $ref: '#/definitions/entity.User'
              type: array
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.UserErrorResponse'
      security:
      - BearerAuth: []
      summary: List all Users
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
